#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

long long N, K;

void input(vector<pair<long long, long long>>& nums) {
    for (long long i = 0; i < N; i++) {
        long long element;
        cin >> element;
        
        nums[i] = {element, i}; 
    }
    
    sort(nums.begin(), nums.end());
}

void findElement(long long element, vector<long long>& indexes, vector<long long>& count, vector<pair<long long, long long>>& nums) {
    long long left = 0, right = N - 1, steps = 0;

    while (left <= right) {
        long long mid = left + (right - left) / 2; 
        steps++; 

        if (nums[mid].first == element) { 
            indexes.push_back(nums[mid].second); 
            count.push_back(steps); 
            
            return;
        } 
        
        else if (nums[mid].first > element) {
            right = mid - 1;
        }
        
        else { 
            left = mid + 1;
        }
    }

    indexes.push_back(-1);
    count.push_back(steps);
}

void printResults(const vector<long long>& indexes, const vector<long long>& count) {
    for (long long i = 0; i < K; i++) {
        cout << indexes[i] << " ";
    }
    
    cout << endl;

    for (long long i = 0; i < K; i++) {
        cout << count[i] << " ";
    }
    
    cout << endl;
}

void solve(vector<pair<long long, long long>>& nums) {
    vector<long long> indexes, count;

    for (long long i = 0; i < K; i++) {
        long long element;
        cin >> element;
        
        findElement(element, indexes, count, nums);
    }

    printResults(indexes, count);
}

int main() {
    cin >> N;

    vector<pair<long long, long long>> nums(N);

    input(nums);

    cin >> K;

    solve(nums);

    return 0;
}
