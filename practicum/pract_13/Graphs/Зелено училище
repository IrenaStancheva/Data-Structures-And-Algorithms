#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>

long long N, M, K;
std::unordered_map<long long, std::unordered_set<long long>> graph;

void input() {
    std::cin >> N >> M >> K;
    
    for(int i = 1; i <= N; i++){
        graph[i];
    }
    
    int x, y;
    for(int i = 0; i < M; i++){
        std::cin >> x >> y;
        
        graph[x].insert(y);
        graph[y].insert(x);
    }
}

std::vector<long long> bfs() {
    std::vector<long long> result;
    
    std::unordered_set<long long> visited;
    visited.insert(N);
    
    std::queue<long long> q;
    q.push(N);
    
    long long level = 0;
    
    while(!q.empty()) {
        long long size = q.size();
        
        for(long long i = 0; i < size; i++) {
            auto current = q.front();
            q.pop();
            
            if(level == K) {
                result.push_back(current);
            }
            
            if(level > K){
                return result;
            }
            
            for(const auto& nb : graph[current]) {
                if(visited.count(nb) != 0) {
                    continue;
                }
                
                visited.insert(nb);
                q.push(nb);
            }
        }
        
        level++;
    }
    
    
    return result;
}

int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    input();
    
    std::vector<long long> result = bfs();
    
    if(result.size() == 0) {
        std::cout << -1;
        return 0;
    }
    
    std::sort(result.begin(), result.end());
    
    for(auto element : result){
        std::cout << element << ' ';
    }
    
    return 0;
}
