#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>
using namespace std;

std::unordered_map<long long, std::unordered_set<long long>> graph;

void dfs(std::unordered_set<long long>& visited, long long current) {
    visited.insert(current);
    
    for(const auto& nb : graph[current]) {
        if(visited.count(nb) != 0) {
            continue;
        }
        
        dfs(visited, nb);
    }
}

int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    long long M, N;
    std::cin >> M >> N;
    
    long long v1, v2;
    for(long long i = 0; i < N; i++) {
        std::cin >> v1 >> v2;
        
        graph[v1].insert(v2);
        graph[v2].insert(v1);
    }
    
    long long count = 0;
    std::unordered_set<long long> visited;
    
    for(auto iter = graph.begin(); iter != graph.end(); iter++) {
        if(visited.count(iter->first) == 0) {
            dfs(visited, iter->first);
            count++;
        }
    }
    
    std::cout << count;
    
    return 0;
}
