#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
using namespace std;

long long result = 0;

long long dfs(long long current, std::unordered_set<long long>& visited, std::vector<std::unordered_set<long long>>& graph) {
    if(graph[current].size() == 0) {
        return 1;
    }
    
    visited.insert(current);
    
    long long children = 1;
    for(const auto& neighbour : graph[current]) {
        if(visited.count(neighbour) == 0) {
            children += dfs(neighbour, visited, graph);
        }
    }
    
    if(children % 2 == 0) {
        result++;
        return 0;
    }
    
    return children;
}

int main() {
    long long V, E;
    std::cin >> V >> E;
    
    std::vector<std::unordered_set<long long>> graph(V + 1);
    
    long long v1, v2;
    for(long long i = 0; i < E; i++) {
        std::cin >> v1 >> v2;
        
        graph[v1].insert(v2);
        graph[v2].insert(v1);
    }
    
    std::unordered_set<long long> visited;
    dfs(1, visited, graph);
    
    std::cout << result - 1;
    
    return 0;
}
