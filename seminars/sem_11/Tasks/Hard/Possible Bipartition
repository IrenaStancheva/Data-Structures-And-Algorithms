class Solution {
    bool dfs(int current, int colour, std::unordered_map<int, int>& visited, std::unordered_map<int, std::unordered_set<int>>& graph) {
        visited[current] = colour;

        for(const auto& nb : graph[current]) {
            if(visited.count(nb) > 0) {
                if(visited[nb] == colour) {
                    return false;
                }
                continue;
            }
            if(!dfs(nb, 1 - colour, visited, graph)) {
                return false;
            }
        }

        return true;
    }

public:
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {
        std::unordered_map<int, std::unordered_set<int>> graph;

        for(int i = 1; i <= n; i++) {
            graph[i];
        }

        for(const auto& element : dislikes) {
            int v1 = element[0];
            int v2 = element[1];

            graph[v1].insert(v2);
            graph[v2].insert(v1);
        }

        std::unordered_map<int, int> visited;

        for(int i = 1; i <= n; i++) {
            if(visited.count(i) != 0) {
                continue;
            }
            if(!dfs(i, 0, visited, graph)) {
                return false;
            }
        }

        return true;
    }
};
