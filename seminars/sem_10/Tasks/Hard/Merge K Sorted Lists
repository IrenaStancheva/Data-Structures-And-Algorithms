/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) 
    {
        std::priority_queue<int, vector<int>, greater<>> pq;

        int size = lists.size();
        for(int i = 0; i < size; i++){
            auto current = lists[i];
            while(current){
                pq.push(current->val);
                current = current->next;
            }
        }

        if(pq.empty()){
            return nullptr;
        }

        ListNode* head = new ListNode(pq.top());
        ListNode* current = head;
        pq.pop();

        while(!pq.empty()){
            current->next = new ListNode(pq.top());
            current = current->next;
            pq.pop();
        }

        return head;
    }
};
