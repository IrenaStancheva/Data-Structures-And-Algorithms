#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>

using namespace std;

struct Interval
{
    size_t start, end;
};

bool compIntervals(const Interval& lhs, const Interval& rhs)
{
    return lhs.start < rhs.start;
}

size_t max_count_of_benches(const vector<Interval>& intervals, size_t size)
{
    priority_queue<size_t, vector<size_t>, greater<size_t>> pq;
    
    size_t count = 0;
    for(size_t i = 0; i < size; i++)
    {
        while(!pq.empty() && pq.top() <= intervals[i].start) 
            pq.pop();
        
        pq.push(intervals[i].end);
        
        if(count < pq.size())
            count = pq.size();
    }
    
    return count;
}
int main() 
{
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    
    size_t N = 0;
    cin >> N;
    
    vector<Interval> intervals;
    
    for(size_t i = 0; i < N; i++)
    {
        Interval j;
        std::cin >> j.start >> j.end;
        
        if(j.start < j.end)
            intervals.push_back(j);
    }
    
    std::sort(intervals.begin(), intervals.end(), compIntervals);

    size_t max_count = max_count_of_benches(intervals, intervals.size());
    
    cout << max_count;
    
    return 0;
}
