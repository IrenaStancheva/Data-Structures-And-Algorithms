#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <climits>
using namespace std;

struct Edge {
    int from, to, weight;
};

std::vector<Edge> edges;
int n, m, s, t;

int bellman_ford() {
    std::vector<int> distances(n + 1, INT_MIN);
    distances[s] = 0;
    
    for(int i = 0; i < m; i++) {
        for(const auto& edge : edges) {
            distances[edge.to] = max(distances[edge.to], distances[edge.from] + edge.weight);
        }
    }
    
    return distances[t] == INT_MIN? -1 : distances[t];
}

int maxPath() {
    return bellman_ford();
}

int main() {
    std::cin >> n >> m >> s >> t;
    
    int v1, v2, w;
    for(int i = 0; i < m; i++) {
        std::cin >> v1 >> v2 >> w;
        
        edges.push_back({v1, v2, w});
    }
    
    std::cout << maxPath();
    
    return 0;
}
