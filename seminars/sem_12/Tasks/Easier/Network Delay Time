struct Edge {
    int to, weight;
};

struct Node {
    int index, distance;

    bool operator<(const Node& other) const {
        return distance > other.distance;
    }
};

class Solution {
    std::unordered_map<int, std::vector<Edge>> graph;

    void inputGraph(vector<vector<int>>& times) {
         for (const auto& edge : times) {
            graph[edge[0]].push_back({edge[1], edge[2]});
        }
    }

    std::vector<int> dijkstra(int n, int start) {
        std::vector<int> distances(n, INT_MAX);
	    std::priority_queue<Node> nextToProccess;

	    distances[start] = 0;
	    nextToProccess.push({ start, 0 });

	    while (!nextToProccess.empty()) {
		    Node current = nextToProccess.top();
		    nextToProccess.pop();

		    if (current.distance > distances[current.index]) {
			    continue;
		    }

		    for (const auto& edge : graph[current.index]) {
			    int newWeight = edge.weight + current.distance;

			    if (newWeight < distances[edge.to]) {
				    distances[edge.to] = newWeight;
				    nextToProccess.push({ edge.to, newWeight });
			    }
		    }
	    }

	    return distances; 
    }

    int maxDistance(std::vector<int>& distances, int n, int start){
        int maxDist = -1;

        for(int i = 1; i <= n; i++){
            maxDist = std::max(maxDist, distances[i]);
        }

        return maxDist == INT_MAX? -1 : maxDist;
    }

    int networkDelayTimeRec(int start, int n) {

        std::vector<int> distances(n + 1, INT_MAX);

        distances = dijkstra(n + 1, start);

        return maxDistance(distances, n, start);
    }

public:    
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        inputGraph(times);

        return networkDelayTimeRec(k, n);
    }
};
