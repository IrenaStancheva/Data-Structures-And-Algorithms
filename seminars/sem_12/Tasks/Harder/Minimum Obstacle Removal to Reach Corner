struct Node{
    int x, y, distance;

    bool operator<(const Node& other) const{
        return distance > other.distance;
    }
};

class Solution {
private:
    int N, M;

    int dx[4] = {-1, 1, 0, 0};
    int dy[4] = {0, 0, -1, 1};

    bool can_be_moved(int x, int y){
        return x >= 0 && x < N && y >= 0 && y < M;
    }
public:
    int dijkstra(vector<vector<int>>& graph){
        std::priority_queue<Node> pq;
        pq.push({0, 0, graph[0][0]});

        std::vector<std::vector<int>> dist(N, std::vector<int>(M, INT_MAX));
        dist[0][0] = graph[0][0];

        while(!pq.empty()){
            auto current = pq.top();
            pq.pop();

            if(current.distance > dist[current.x][current.y]){
                continue;
            }
            if(current.x == N - 1 && current.y == M - 1){
                return current.distance;
            }

            for(int i = 0; i < 4; i++){
                int x = current.x + dx[i];
                int y = current.y + dy[i];

                if(can_be_moved(x, y)){
                    int new_dist = graph[x][y] + current.distance;

                    if(new_dist < dist[x][y]){
                        dist[x][y] = new_dist;
                        pq.push({x, y, new_dist});
                    }
                }
            }
        }

        return dist[N - 1][M - 1];
    }
    int minimumObstacles(vector<vector<int>>& grid) {
        N = grid.size();
        M = grid[0].size();
        
        return dijkstra(grid);
    }
};
