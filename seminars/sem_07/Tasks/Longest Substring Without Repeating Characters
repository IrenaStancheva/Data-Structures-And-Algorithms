#include <iostream>
#include <unordered_set>
#include <string>
#include <algorithm>

class Solution {
public:
    int lengthOfLongestSubstring(std::string s) {
        if (s.empty())
            return 0;

        std::unordered_set<char> charSet;
        size_t max_length = 0;
        size_t start = 0;

        for (size_t end = 0; end < s.length(); ++end) {
            // If the character is already in the set, shrink the window
            while (charSet.find(s[end]) != charSet.end()) {
                charSet.erase(s[start]);
                ++start;
            }
            // Insert the new character and update the maximum length
            charSet.insert(s[end]);
            max_length = std::max(max_length, end - start + 1);
        }

        return max_length;
    }
};
