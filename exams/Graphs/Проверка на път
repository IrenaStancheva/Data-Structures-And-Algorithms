#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
using namespace std;

std::unordered_map<int, std::unordered_map<int, int>> edges;

int hasPath(const std::vector<int>& path, int K){
    int result = 0;
    
    for(int i = 1; i < K; i++){
        if(edges[path[i - 1]].count(path[i]) != 0){
            result += edges[path[i - 1]][path[i]];
        }
        else {
            return -1;
        }
    }
    return result;
}

int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
    int N, M;
    std::cin >> N >> M;
        
    for(int i = 0; i < M; i++){
        int x, y, w;
        std::cin >> x >> y >> w;
        
        edges[x][y] = w;
        edges[y][x] = w;
    }
    
    int K;
    std::cin >> K;
    
    std::vector<int> path(K);
    for(int i = 0; i < K; i++){
        std::cin >> path[i];
    }
    
    std::cout << hasPath(path, K);
    
    return 0;
}
