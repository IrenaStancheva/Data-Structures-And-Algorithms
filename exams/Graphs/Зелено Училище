#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <queue>
using namespace std;

std::unordered_map<int, std::unordered_set<int>> graph;
int N, M, K;

std::vector<int> bfs(){
    std::vector<int> result;
    int level = 0;
    
    std::queue<int> q;
    q.push(N);
    
    std::unordered_set<int> visited;
    visited.insert(N);
    
    while(!q.empty()){
        int size = q.size();
        
        for(int i = 0; i < size; i++){
            int current = q.front();
            q.pop();
        
            if(level == K){
                result.push_back(current);
            }
            
            if(level > K){
                return result;
            }
        
            for(const auto& neighbour : graph[current]){
                if(visited.count(neighbour) != 0){
                  continue;
                }
            
                visited.insert(neighbour);
                q.push(neighbour);
            }
        }
        
        level++;
    }
    
    return result;
}


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    std::cin >> N >> M >> K;
    
    for(int i = 1; i <= N; i++){
        graph[i];
    }
    
    int x, y;
    for(int i = 0; i < M; i++){
        std::cin >> x >> y;
        
        graph[x].insert(y);
        graph[y].insert(x);
    }
    
    std::vector<int> result = bfs();
    
    if(result.size() == 0){
        std::cout << -1;
        return 0;
    }
    
    std::sort(result.begin(), result.end());
    
    for(auto element : result){
        std::cout << element << ' ';
    }
    
    return 0;
}
