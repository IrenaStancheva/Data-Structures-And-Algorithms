#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
using namespace std;

int N, M;

struct UnionFind{
public:
    UnionFind(int v) : parents(v), sizes(v, 1){
        for(int i = 0; i < v; i++){
            parents[i] = i;
        }
    }
    
    bool inOneComponent(int first, int second){
        return getParent(first) == getParent(second);
    }
    
    void unite(int first, int second){
        int parentFirst = getParent(first);
        int parentSecond = getParent(second);
        
        if(parentFirst == parentSecond){
            return;
        }
        
        if(sizes[parentFirst] < sizes[parentSecond]){
            std::swap(parentFirst, parentSecond);
        }
        
        parents[parentSecond] = parentFirst;
        sizes[parentFirst] += sizes[parentSecond];
    }
private:
    std::vector<int> parents, sizes;
    
    int getParent(int child){
        if(child == parents[child]){
            return child;
        }
        
        return parents[child] = getParent(parents[child]);
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    std::cin >> N >> M;
    
    UnionFind uf(N + 1);

    int x, y;
    for(int i = 0; i < M; i++){
        std::cin >> x >> y;
        
        if(uf.inOneComponent(x - 1, y - 1)){
            continue;
        }
        
        uf.unite(x - 1, y - 1);
    }
    
    int Q;
    std::cin >> Q;
    
    for(int i = 0; i < Q; i++){
        std::cin >> x >> y;

        std::cout << (uf.inOneComponent(x - 1, y - 1) ? 1 : 0) << ' ';
    }
    
    return 0;
}
