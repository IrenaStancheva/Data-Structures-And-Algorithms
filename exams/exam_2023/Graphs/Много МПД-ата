#include <bits/stdc++.h>
using namespace std;

struct Edge {
    long long from, to, weight;
    
    bool operator<(const Edge& other) const {
        return weight < other.weight;
    }
};

struct UnionFind {
public:
    UnionFind(long long size) : parents(size), sizes(size, 1), mstTreeOfComponents(size, 0) {
        for(long long i = 0;  i < size; i++) {
            parents[i] = i;
        }
    }
    
    bool inOneComponent(long long first, long long second) {
        return getParent(first) == getParent(second);
    }
    
    void unite(const Edge& edge) {
        long long parentFirst = getParent(edge.from);
        long long parentSecond = getParent(edge.to);
        
        if(parentFirst == parentSecond) {
            return;
        }
        
        if(sizes[parentFirst] < sizes[parentSecond]) {
            std::swap(parentFirst, parentSecond);
        }
        
        sizes[parentFirst] += sizes[parentSecond];
        parents[parentSecond] = parents[parentFirst];
        mstTreeOfComponents[parentFirst] += mstTreeOfComponents[parentSecond] + edge.weight;
        
        //std::cout << "MstTree of Component " << parentFirst << " is " << mstTreeOfComponents[parentFirst] << '\n';
    }

    std::vector<long long> parents, sizes, mstTreeOfComponents;
    
    long long getParent(long long child) {
        if(child == parents[child]) {
            return child;
        }
        
        return parents[child] = getParent(parents[child]);
    }
};

long long V, E, K;
std::vector<Edge> edges;

void input() {
    std::cin >> V >> E >> K;
    
    edges.clear();
        
    long long from, to, weight;
    for(long long j = 0; j < E; j++) {
        std::cin >> from >> to >> weight;
        
        edges.push_back({from, to, weight});
    }
}

long long kruskal() {
    std::sort(edges.begin(), edges.end());
    
    UnionFind uf(V);
    long long componentsCount = V;
    
    for(long long i = 0; i < E; i++) {
        if(uf.inOneComponent(edges[i].from, edges[i].to)) {
            continue;
        }
        
        uf.unite(edges[i]);
        
        componentsCount--;
        
        if(componentsCount == 1) {
            break;
        }
    }
    
    
    long long mstSum = 0;
    for (long long i = 0; i < V; i++) {
        if (uf.getParent(i) == i) {  // Only process roots
            if (uf.sizes[i] % K == 0) {
                mstSum += uf.mstTreeOfComponents[i];
            }
        }
    }

    return mstSum;
}

void solve() {
    std::cout << kruskal() << '\n';
}

int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(NULL);
    
    long long T;
    std::cin >> T;
    
    for(long long i = 0; i < T; i++) {
        input();
        
        solve();
    }

    return 0;
}
