using namespace std;
#include <iostream>
#include <queue>
#include <unordered_map>

struct Edge {
	int to, weight;
};

struct Node {
	int index, distance;

	bool operator<(const Node& other) {
		return distance > other.distance;
	}
};

std::vector<int> dijkstra(int start, int countV, std::unordered_map<int, std::vector<Edge>>& graph) {
	std::vector<int> distances(countV, INT_MAX);// the shortest paths from the start Node to the rest in the graph

	std::priority_queue<Node> nextToProccess;

	distances[start] = 0;
	nextToProccess.push({ start, 0 });//we start from the starting Node and the distance from the start to the start is 0

	while (!nextToProccess.empty()) {
		Node current = nextToProccess.top();
		nextToProccess.pop();

		if (current.distance > distances[current.index]) {
			continue;
			//the current distance we are examing is more than the saved one in the result
		}

		//search the neighbours for better paths
		for (const auto& edge : graph[current.index]) {
			int newWeight = edge.weight + current.distance;// new distance or weight is found by summaring the weight of the path between the neighbour and current Node + the weight on the current Node

			if (newWeight < distances[edge.to]) {
				distances[edge.to] = newWeight;
				nextToProccess.push({ edge.to, newWeight });
			}
		}
	}

	return distances; 
}
int main() {

}
