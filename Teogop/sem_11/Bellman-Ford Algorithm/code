#include <iostream>
#include <vector>
using namespace std;

struct Edge {
	int from, to, weigth;
};

std::vector<int> bellman_ford(int start, int nodesCount, const std::vector<Edge>& graph) {
	std::vector<int> distances(nodesCount, INT_MAX);// distance between the start node and any other in the graph

	distances[start] = 0;

	//we start finding minimum weights by using 0 edges, then 1, then 2
	for (int i = 0; i < nodesCount - 1; i++) {
		//for each 'level' we travel through the graph finding best paths
		for (const auto& edge : graph) {
			int newWeight = edge.weigth + distances[edge.from];
			if (distances[edge.from] != INT_MAX || newWeight < distances[edge.to]) {
				distances[edge.to] = newWeight;
			}
		}
	}

	//looking for negative cycles in the result distances (if there are any we throw an error)
	for (const auto& edge : graph) {
		int currentWeight = distances[edge.from] + edge.weigth;
		if (distances[edge.from] != INT_MAX && currentWeight < distances[edge.to]) {
			throw std::exception("Negative cycles in graph!");
		}
	}

	return distances;
}

int main() {

}
