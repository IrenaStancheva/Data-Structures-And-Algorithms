class Solution {
private:
    std::vector<std::string> result;
    std::unordered_map<std::string, std::deque<std::string>> graph;

    // Build the graph and sort destinations in lexicographical order
    void inputGraph(std::vector<std::vector<std::string>>& tickets) {
        for (const auto& ticket : tickets) {
            graph[ticket[0]].push_back(ticket[1]);
        }

        // Sort destinations lexicographically
        for (auto& [key, destinations] : graph) {
            std::sort(destinations.begin(), destinations.end());
        }
    }

    // Perform DFS and construct the itinerary
    void dfs(const std::string& airport) {
        auto& destinations = graph[airport];

        // Visit all destinations for the current airport
        while (!destinations.empty()) {
            std::string next = destinations.front();
            destinations.pop_front(); // Use the ticket
            dfs(next);
        }

        // Add the airport to the result during backtracking
        result.push_back(airport);
    }

public:
    std::vector<std::string> findItinerary(std::vector<std::vector<std::string>>& tickets) {
        inputGraph(tickets); // Build the graph

        dfs("JFK"); // Start DFS from "JFK"

        // Reverse the result since it's constructed in reverse order
        std::reverse(result.begin(), result.end());

        return result;
    }
};
