#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

struct Task {
    long long startTime, neededTime;
    int index;
    
    Task(long long startTime, long long neededTime, int index) : startTime(startTime), neededTime(neededTime), index(index) {}
};

struct ByStartComparator {
    bool operator()(const Task& lhs, const Task& rhs) {
        return lhs.startTime > rhs.startTime;
    }
};

struct ByNeededTimeComparator {
    bool operator()(const Task& lhs, const Task& rhs) {
        if(lhs.neededTime == rhs.neededTime) {
            return lhs.index > rhs.index;
        }
        
        return lhs.neededTime > rhs.neededTime;
    }
};

std::priority_queue<Task, std::vector<Task>, ByStartComparator> starts;
std::priority_queue<Task, std::vector<Task>, ByNeededTimeComparator> times;

int main() {
    int N;
    std::cin >> N;
    
    int startTime, neededTime;
    for(int i = 0; i < N; i++) {
        std::cin >> startTime >> neededTime;
        
        Task current(startTime, neededTime, i);
        
        starts.push(current);
    }
    
    int time = 0;
    
    while(!starts.empty() || !times.empty()) {
        
        while(!starts.empty() && starts.top().startTime <= time) {
            times.push(starts.top());
            starts.pop();
        }
        
        if(times.empty() && !starts.empty()) {
            time = starts.top().startTime;
            continue;
        }
        
        Task newTask = times.top();
        times.pop();
        
        std::cout << newTask.index << " ";
        
        time += newTask.neededTime;
    }
    
    return 0;
}
