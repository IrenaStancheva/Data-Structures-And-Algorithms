#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
using namespace std;

std::unordered_map<int, std::unordered_set<int>> graph;


bool dfs(long long current, std::unordered_map<int, std::unordered_set<int>>& graph, std::unordered_map<long long, char>& colors)
{
    colors[current] = 'o';//open
    
    for(auto& neighbour : graph[current])
    {
        if(colors[neighbour] == 'o')
            return true;
        if(colors[neighbour] == 'c')
            continue;
        if(dfs(neighbour, graph, colors))
            return true;
    }
    
    colors[current] = 'c';//closed
    
    return false;
}
bool hasCycle(std::unordered_map<int, std::unordered_set<int>> &graph)
{
    std::unordered_map<long long, char> colors;
    
    for (auto it = graph.cbegin(); it != graph.cend(); it++)
    {
        if(colors.count(it->first) != 0)
            continue;
        
        if(dfs(it->first, graph, colors))
            return true;
    }
    
    return false;
}

bool solve()
{
    long long V = 0, E = 0;
    std::cin >> V >> E;
    
    for (int v = 1; v <= V; v++)
    {
        graph[v];
    }
        
    long long first, second, weight;
    for(long long j = 0; j < E; j++)
    {
        std::cin >> first >> second >> weight;  
        
        graph[first].insert(second);
    }
        
    bool cycle = hasCycle(graph);
        
    graph.clear();
        
    return cycle;
}

int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
    
    std::cin.tie(NULL);
    std::ios_base::sync_with_stdio(false);

    long long n = 0;
    std::cin >> n;
    
    for(long long i = 0; i < n; i++)
    {
        auto answer = solve() ? "true" : "false";
        cout << answer << " ";
    }
    
    return 0;
}
