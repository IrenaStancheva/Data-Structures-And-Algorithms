class Solution {
public:
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {
        // Create the graph using adjacency list
        vector<vector<int>> graph(n + 1);  // Nodes are from 1 to n
        for (auto& el : dislikes) {
            graph[el[0]].push_back(el[1]);
            graph[el[1]].push_back(el[0]);
        }

        vector<int> color(n + 1, -1);  // -1 means unvisited

        // Helper function for DFS to color the graph
        function<bool(int, int)> dfs = [&](int node, int c) {
            color[node] = c;
            for (int neighbor : graph[node]) {
                // If neighbor has the same color, it's not bipartite
                if (color[neighbor] == c) {
                    return false;
                }
                // If unvisited, recursively color it with the opposite color
                if (color[neighbor] == -1 && !dfs(neighbor, 1 - c)) {
                    return false;
                }
            }
            return true;
        };

        // Check each connected component
        for (int i = 1; i <= n; ++i) {
            if (color[i] == -1) {  // Not visited yet
                if (!dfs(i, 0)) {  // Start DFS with color 0
                    return false;
                }
            }
        }
        return true;  // It's possible to bipartition
    }
};
