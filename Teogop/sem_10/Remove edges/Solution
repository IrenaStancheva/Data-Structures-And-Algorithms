#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>

using namespace std;

int result = 0;

int dfs(std::unordered_map<int, std::unordered_set<int>>& graph, unordered_set<int>& visited, int current){
    if(graph[current].size() == 0){
        return 1;
    } 
    
    visited.insert(current);
    
    size_t children = 1;
    for(auto& neighbour : graph[current]){
        if(visited.count(neighbour) == 0){
            children += dfs(graph, visited, neighbour);
        }
    }
    
    if(children % 2 == 0){
        result++;
        return 0;
    }
    
    return children;
}

int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    std::unordered_map<int, std::unordered_set<int>> graph;
    
    int V, E;
    cin >> V >> E;
    
    for(int i = 0; i < V; i++){
        graph[i];
    }
    
    for(int i = 0; i < E; i++){
        int first, second;
        std::cin >> first >> second;
        
        graph[first].insert(second);
        graph[second].insert(first);
    }
    
    unordered_set<int> visited;
    
    dfs(graph, visited, 1);
    
    std::cout << result - 1;
    
    return 0;
}
